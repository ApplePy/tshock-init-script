#! /bin/sh

# TShock Init Script
# Maintainer: Darryl Murray
# Authors: Darryl Murray <darrylmurray@me.com>

### BEGIN INIT INFO
# Provides:		Terraria Server
# Required-Start:	none
# Required-Stop:	none
# Default-Start:	#Figure this out#
# Default-Stop:		#Figure this out#
# Short-Description:	Allows for simple control of a Terraria server.
# Description:		Allows for simple control of a Terraria server.
### END INIT INFO


###
# DO NOT EDIT THIS FILE!
# Make the necessary changes in /etc/tshock instead.
###

# Username
USERNAME=terraria

# Terraria Directory
SOURCEDIR=/opt/tshock

# Server executable
SERVERBIN=${SOURCEDIR}/TerrariaServer.exe

# Server Config
CONFIGDIR=/etc/tshock
SERVERCONFIG=${CONFIGDIR}/server.conf

# PID
PID=/run/tshock.pid

# Current User
ME=$(whoami)

# Original Arguments
ARGS=$@


# Quick dictionary:
# 0 = no PID
# 1 = PID available, and valid
# 2 = PID available, but stale
check_pid(){
  if [ -f ${PID} ]; then

    kill -0 $(cat ${PID})

    if [ "$?" == "0" ]; then
      echo "1"
    else
      echo "2"
    fi

  else
    echo "0"
  fi
  # Step 1: check if PID exits
  # Step 2: if PID exists, check if it is valid
}

check_if_root(){
  if [ "$(whoami)" != 'root' ]; then
    echo "This script must be run as root. Use \"sudo\" to accomplish this." 1>&2
    exit 1
  fi
}

change_user(){
  if [ $ME != $USERNAME ]; then
    check_if_root
    sudo -u ${USERNAME} bash -c "$0 $ARGS"
    exit $?
  fi
}

start_tshock(){
  local result=$(check_pid)
  if [ result == "0" ]; then
    sudo daemon -D ${SOURCEDIR} -F ${PID} -u ${USERNAME} -n tshock ${SERVERBIN} -config ${SERVERCONFIG}
    echo "Program has started!"
  elif [ result == "1" ]; then
    echo "Program is already running!"
  elif [ result == "2" ]; then
    echo "Stale PID found! Removing..."
    rm -f ${PID}
    sudo daemon -D ${SOURCEDIR} -F ${PID} -u ${USERNAME} -n tshock ${SERVERBIN} -config ${SERVERCONFIG}
    echo "Program has started!"
  fi
}

stop_tshock(){
  kill $(cat ${PID})

  if [ $? == 0]; then
    rm -f ${PID}
    echo "Program has stopped!"
  else
    echo "Program has encountered the error: $?"
  fi
}

uninstall_tshock(){
  read -p "Are you sure? " yn

  case $yn in
   [Yy]* ) make install;;
   [Nn]* ) exit;;
   *) echo "Please answer yes or no."; exit 2;;
  esac

  stop_tshock

  rm -f ${SOURCEDIR} # clear top level directory of files
  rm -r -f ${SOURCEDIR}/ServerPlugins
  rm -f ${SOURCEDIR}/tshock/*.log
  rm -f ${SOURCEDIR}/tshock/auth.lck
  rm -f ${SOURCEDIR}/tshock/tshock.sqlite

  chown -R root: ${SOURCEDIR}
  chown -R root: ${CONFIGDIR}

  deluser terraria

  apt-get remove mono-complete

  echo "Tshock has been uninstalled! Your worlds and configuration files are still intact at \"${SOURCEDIR}\" and\"${CONFIGDIR}\"."
}

purge_tshock(){
  read -p "Are you sure? " yn

  case $yn in
   [Yy]* ) make install;;
   [Nn]* ) exit;;
   *) echo "Please answer yes or no."; exit 2;;
  esac

  stop_tshock

  rm -r -f ${SOURCEDIR}
  rm -r -f ${CONFIGDIR}
  rm -f /run/tshock.pid

  deluser terraria

  apt-get purge mono-complete

  echo "Tshock has been uninstalled and all related files have been purged."
}

change_world(){
  echo "Not written yet!"
  # contents
}

new_world(){
  echo "Not written yet!"
  # contents
}

reconfigure_tshock(){
  echo "Starting configuration editor..."
  editor ${SERVERCONFIG}
  echo "Reconfiguration complete!"
}



### Input

case "$1" in
  start)
    check_if_root
    start_tshock
    ;;
  stop)
    check_if_root
    stop_tshock
    ;;
  restart)
    check_if_root
    stop_tshock
    start_tshock
    ;;
  uninstall) # Using root to ensure a proper uninstallation
    check_if_root
    uninstall_tshock
    ;;
  purge) # Using root to ensure a thorough purge
    check_if_root
    purge_tshock
    ;;
  change-world)
    change_user
    change_world
    ;;
  new-world)
    change_user
    new_world
    ;;
  reconfigure)
    change_user
    reconfigure_tshock
    ;;
  *)
    echo "Usage: service tshock {start|stop|restart|reconfigure|new-world|change-world|uninstall|purge"}
    exit 1
    ;;
esac

exit
